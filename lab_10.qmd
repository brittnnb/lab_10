---
title: 'Lab 10: Distances and the Border Zone'
author: 'Brittany Bobb'
date: '2025-04-24'
format: 
    html:
      self-contained: true
execute:
  echo: true
editor: source
subtitle: 'Ecosystem Science and Sustainability 523c'
---

```{r}
# spatial data science
library(tidyverse)
library(sf)
library(units)

# Visualization
library(gghighlight)
library(ggrepel)
library(knitr)
library(flextable)

```

```{r}
#| echo: true
library(remotes)
remotes::install_github("ropensci/USAboundaries")
```

```{r}
#| echo: true
remotes::install_github("ropensci/USAboundariesData")
```

```{r}
#| echo: true
remotes::install_github("ropenscilabs/rnaturalearthdata")
```

```{r}
eqdc <- st_crs(5070) #sets the variable eqdc to the CRS with EPSG code 5070, which corresponds to EPSG:5070 - NAD83/ Conus Albers 
```

```{r}
states <- USAboundaries::us_states(resolution = "low") |>
  filter(!state_abbr %in% c("HI", "AK","PR")) |>
  st_transform(eqdc)
```

```{r}
#USA State Boundaries 
countries <- rnaturalearthdata::countries110 |>
  st_transform(eqdc)
```

```{r}
#Remove the cities 
library(readr)
cities <- read_csv("data/uscities.csv", show_col_types = FALSE) |>
  st_as_sf(coords = c("lng", "lat"), crs = 4326) |>
  st_transform(eqdc)

```

```{r}
#
# Question 2 
#

```

```{r}
# 2.1 Distance to USA Border (km)
us <- st_union(states) |> #merges geometries 
  st_cast("MULTILINESTRING") |> #changes the geometry type of spatial features 
  st_as_sf()
  
cities <- cities %>%
  #st_filter(st_union(states)) %>% #filter spatial features based on their spatial relationship to another greometry 
  mutate(distance_to_us_border = 
           set_units(st_distance(geometry, us), "km")) %>%
            drop_units()

cities_selected <- cities |>
  select (city, state_name, distance_to_us_border) 

farthest_cities <- cities_selected |> 
  arrange(desc(distance_to_us_border)) 
  
#flextable
farthest_cities |>
  slice_head(n = 5)|>
  flextable() |>
  set_header_labels(city = "City", state_name = "State", distance_to_us_border = "Distance ") |> 
  colformat_num(j = "distance_to_us_border", digits = 2) |> 
  autofit()

```

```{r}
# 2.2 Distance to States (km)

# Step 1: Convert state polygons to preserved MULTILINESTRING boundaries (not dissolved)
us_state_borders <- st_cast(states, "MULTILINESTRING")

# Step 2: Ensure CRS match
us_state_borders <- st_transform(us_state_borders, st_crs(cities))

# Step 3: Compute distance to nearest state boundary for each city
cities <- cities |>
  mutate(distance_to_state_border = set_units(st_distance(geometry, us_state_borders), "km")) |>
  mutate(distance_to_state_border = drop_units(distance_to_state_border))

# Step 4: Select and arrange top 5 cities farthest from any state border
farthest_city <- cities |>
  select(city, state_name, distance_to_state_border) |>
  arrange(desc(distance_to_state_border)) |>
  slice_head(n = 5)

# Step 5: Display table using flextable
farthest_cities |>
  slice_head(n = 5) |>
  flextable() |>
  set_header_labels(
    city = "City",
    state_name = "State",
    distance_to_state_border = "Distance to State Border (km)"
  ) |>
  colformat_num(j = "distance_to_us_border", digits = 2) |>
  autofit()

```

```{r}
# 2.3 Distance to Mexico (km)
# For 2.3 we are interested in calculating the distance of each city to the Mexican border. To do this we need to isolate Mexico from the country objects. In addition to storing this data as part of the cities data.frame, produce a table (flextable) documenting the five cities farthest from a state border. Include only the city name, state, and distance.

# Step 1: Extract Mexico boundary
mexico <- countries %>%
  filter(admin == "Mexico") %>%
  st_union() %>%
  st_cast("MULTILINESTRING") %>%
  st_as_sf()

# Step 2: Match CRS with cities
mexico <- st_transform(mexico, crs = st_crs(cities))

# Step 3: Calculate distance to Mexico
cities <- cities %>%
  mutate(distance_to_mexico = set_units(st_distance(geometry, mexico), "km")) %>%
  mutate(distance_to_mexico = drop_units(distance_to_mexico))  # Convert to numeric

# Step 4: Select relevant columns
farthest_from_mexico <- cities %>%
  select(city, state_name, distance_to_mexico) %>%
  arrange(desc(distance_to_mexico)) %>%
  slice_head(n = 5)

# Step 5: Create flextable
farthest_from_mexico |>
  slice_head(n = 5) |>
  flextable() |>
  set_header_labels(
    city = "City",
    state_name = "State",
    distance_to_mexico = "Distance to Mexico (km)"
  ) |>
  colformat_num(j = "distance_to_mexico", digits = 2) |>
  autofit()
```

```{r}
# 2.4 Distance to Canada (km) 
# For 2.4 we are interested in calculating the distance of each city to the Canadian border. To do this we need to isolate Canada from the country objects. In addition to storing this data as part of the cities data.frame, produce a table (flextable) documenting the five cities farthest from a state border. Include only the city name, state, and distance.

# Step 1: Extract Canada boundary
canada <- countries %>%
  filter(admin == "Canada") %>%
  st_union() %>%
  st_cast("MULTILINESTRING") %>%
  st_as_sf()

# Step 2: Match CRS with cities
canada <- st_transform(canada, crs = st_crs(cities))

# Step 3: Calculate distance to Canada
cities <- cities %>%
  mutate(distance_to_canada = set_units(st_distance(geometry, canada), "km")) %>%
  mutate(distance_to_canada = drop_units(distance_to_canada))  # Convert to numeric

# Step 4: Select relevant columns
farthest_from_canada <- cities %>%
  select(city, state_name, distance_to_canada) %>%
  arrange(desc(distance_to_canada)) %>%
  slice_head(n = 5)

# Step 5: Create flextable
farthest_from_canada |>
  slice_head(n = 5) |>
  flextable() |>
  set_header_labels(
    city = "City",
    state_name = "State",
    distance_to_canada = "Distance to Canada (km)"
  ) |>
  colformat_num(j = "distance_to_canada", digits = 2) |>
  autofit()
```

```{r}
#
#Question 3
#

```

```{r}
# 3.1 Data
# Show the 3 continents, CONUS outline, state boundaries, and 10 largest USA cities (by population) on a single map

library(ggplot2)
na <- filter(countries, admin %in% c("Mexico", "Canada", "United States of America")) |>
  st_as_sf()

big_cities<- cities |>
  slice_max(population, n = 10)

ggplot() +
  geom_sf(data = na, fill = "grey") +
  geom_sf(data = states, fill = "white", lty = 2, size = 0.5) +
  geom_sf(data = big_cities, color = 'red', size = 0.5) +
  ggrepel::geom_label_repel(data = big_cities, aes(geometry = geometry, label = city, 
                                                   label.size = .1), stat = "sf_coordinates") +
  theme_void()
  
```

```{r}
#3.2 City Distance from the Border
#Create a map that colors USA cities by their distance from the national border. In addition, re-draw and label the 5 cities that are farthest from the border.
library(ggrepel)
library(viridis)

five_farthest <- cities |>
  slice_max(distance_to_us_border, n = 5)

ggplot() +
  geom_sf(data = st_union(states), fill = "grey", lty = 2, size = 0.5) +
  
  geom_sf(data = cities, aes(color = as.numeric(distance_to_us_border)),
          size = 0.5) +
  geom_sf(data = five_farthest, color = 'red', size = 0.7) +
  ggrepel::geom_label_repel(data = five_farthest,
                            aes(geometry = geometry, label = city, 
                                label.size = 0.1),
                            stat = "sf_coordinates") +
  scale_color_viridis_c(limits = c(0, 1000),              # stretch to 1000 km for smoother gradation
    oob = scales::squish) +
  theme_void() +
  theme(legend.position = "bottom") +
  labs(color = "Distance to Border (km)")
```

```{r}
#3.3 City Distance from Nearest State
#Create a map that colors USA cities by their distance from the nearest state border. In addition, re-draw and label the 5 cities that are farthest from any border.
us_border <- st_union(states) |> 
  st_cast("MULTILINESTRING") |> 
  st_as_sf()

us_border <- st_transform(us_border, st_crs(cities))

cities <- cities %>%
  mutate(distance_to_state_border = as.numeric(st_distance(geometry, us_border)))
# Filter out cities without distance data
cities_with_dist <- cities %>%
  filter(!is.na(distance_to_state_border))

# Step 1: Get the 5 cities farthest from a state border
farthest_cities1 <- cities_with_dist %>%
  arrange(desc(distance_to_state_border)) %>%
  slice_head(n = 5)

# Step 2: Plot map
ggplot() +
  geom_sf(data = states, fill = NA, color = "gray60", linetype = "dotted") +  # state boundaries
  geom_sf(data = cities, aes(color = distance_to_state_border), size = 0.5) +  # all cities
  geom_sf(data = farthest_cities1, color = "red", size = 1) +  # highlight 5 farthest cities
  ggrepel::geom_label_repel(
    data = farthest_cities1,
    aes(geometry = geometry, label = city),
    stat = "sf_coordinates",
    min.segment.length = 0,
    size = 3
  ) +
  scale_color_viridis_c(name = "Distance to State Border (km)", option = "C") +
  theme_void() +
  theme(legend.position = "bottom") +
  labs(title = "U.S. Cities Colored by Distance to Nearest State Border",
       subtitle = "Top 5 Farthest Cities Highlighted")
```

```{r}
#3.4 Equidistance boundary from Mexico and Canada
#Here we provide a little more challenge. Use gghighlight to identify the cities that are equal distance from the Canadian AND Mexican border 100 km.In addition, label the five (5) most populous cites in this zone.Hint: (create a new variable that finds the absolute difference between the distance to Mexico and the distance to Canada)

# Step 1: Calculate the absolute difference
cities <- cities %>%
  mutate(
    abs_diff_mexico_canada = abs(distance_to_mexico - distance_to_canada)
  )

# Step 2: Filter for cities where difference is within ~100 km
equidistant_cities <- cities %>%
  filter(abs_diff_mexico_canada <= 100)

# Step 3: Select top 5 most populous of these
top5_equidistant <- equidistant_cities %>%
  arrange(desc(population)) %>%
  slice_head(n = 5)

ggplot() +
  geom_sf(data = states, fill = NA, color = "gray70", linetype = "dotted") +
  geom_sf(data = cities, color = "gray80", size = 0.3) +
  geom_sf(data = equidistant_cities, aes(color = abs_diff_mexico_canada), size = 0.6) +
  gghighlight(abs_diff_mexico_canada <= 100, use_direct_label = FALSE) +
  geom_sf(data = top5_equidistant, color = "red", size = 1) +
  geom_label_repel(
    data = top5_equidistant,
    aes(geometry = geometry, label = city),
    stat = "sf_coordinates",
    size = 3,
    min.segment.length = 0
  ) +
  scale_color_viridis_c(name = "Abs. Diff. (km)", option = "C") +
  theme_void() +
  theme(legend.position = "bottom") +
  labs(
    title = "Cities ~Equidistant from Canada and Mexico",
    subtitle = "Top 5 Most Populous Highlighted"
  )
```

```{r}
#
#Question 4
#

```

```{r}
#Real World Application
#Recently, Federal Agencies have claimed basic constitutional rights protected by the Fourth Amendment (protecting Americans from random and arbitrary stops and searches) do not apply fully at our borders (see Portland). For example, federal authorities do not need a warrant or suspicion of wrongdoing to justify conducting what courts have called a “routine search,” such as searching luggage or a vehicle. Specifically, federal regulations give U.S. Customs and Border Protection (CBP) authority to operate within 100 miles of any U.S. “external boundary”. Further information can be found at this ACLU article.
```

```{r}
# 4.1 Quantifing Border Zone
#How many cities are in this 100 mile zone? (100 miles ~ 160 kilometers), How many people live in a city within 100 miles of the border?, What percentage of the total population is in this zone?, Does it match the ACLU estimate in the link above?, Report this information as a table.

# Convert 100 miles to km, then to meters (if your CRS uses meters)
buffer_distance <- set_units(160, "km")  # or set_units(100, "mi")

# Create border outline from countries (Mexico, Canada, US) + coastlines
border_outline <- countries %>%
  filter(admin %in% c("Mexico", "Canada", "United States of America")) %>%
  st_union() %>%
  st_transform(st_crs(cities)) %>%
  st_cast("MULTILINESTRING")

# Create 100-mile (160 km) buffer zone
border_buffer <- st_buffer(border_outline, dist = buffer_distance)

# Identify cities within 100-mile buffer
cities$in_border_zone <- st_within(cities, border_buffer, sparse = FALSE)[,1]

# Summarize
border_zone_summary <- cities %>%
  mutate(in_border_zone = as.logical(in_border_zone)) %>%
  group_by(in_border_zone) %>%
  summarise(
    num_cities = n(),
    total_population = sum(population, na.rm = TRUE)
  )

# Calculate total population to get percent
total_population <- sum(cities$population, na.rm = TRUE)
border_zone_summary <- border_zone_summary %>%
  mutate(
    percent_of_population = round((total_population / total_population) * 100, 2)
  )

# Clean up for table
border_zone_table <- border_zone_summary %>%
  mutate(
    in_border_zone = ifelse(in_border_zone, "Within 100-mile zone", "Outside 100-mile zone")
  ) %>%
  select(Zone = in_border_zone, Cities = num_cities, Population = total_population, `Percent of Total Population` = percent_of_population)

# Display as table
flextable(border_zone_table) %>%
  colformat_int(j = c("Cities", "Population")) %>%
  autofit()
```

```{r}
# 4.2 Mapping Border Zone
#Make a map highlighting the cites within the 100 mile zone using gghighlight.
#Use a color gradient from ‘orange’ to ‘darkred’.
#Label the 10 most populous cities in the Danger Zone

# Filter cities in the 100-mile zone
cities_danger_zone <- cities %>%
  filter(in_border_zone == TRUE)

# Get 10 most populous cities in the zone
top10_danger_zone <- cities_danger_zone %>%
  arrange(desc(population)) %>%
  slice_head(n = 10)

# Plot
ggplot() +
  # Add states outline
  geom_sf(data = states, fill = NA, color = "black", size = 0.3) +

  # Plot all cities in danger zone with color gradient
  geom_sf(data = cities_danger_zone, aes(color = population), size = 1, alpha = 0.7) +

  # Highlight using gghighlight (ensures clear focus)
  gghighlight(in_border_zone == TRUE, use_direct_label = FALSE) +

  # Label top 10 populous cities in zone
  ggrepel::geom_text_repel(
    data = top10_danger_zone,
    aes(label = city, geometry = geometry),
    stat = "sf_coordinates",
    size = 3,
    color = "black"
  ) +

  # Set color gradient
  scale_color_gradient(low = "orange", high = "darkred", name = "Population") +

  theme_minimal() +
  theme(legend.position = "bottom") +
  labs(
    title = "U.S. Cities Within 100 Miles of the Border",
    subtitle = "Danger Zone: Highlighted cities within 100 miles of US borders (Mexico, Canada, Coastlines)",
    caption = "Data: Custom Dataset"
  )
```

```{r}
#4.3 : Instead of labeling the 10 most populous cites, label the most populous city in each state within the Danger Zone.
# Filter cities in the 100-mile zone (Danger Zone)
cities_danger_zone <- cities %>%
  filter(in_border_zone == TRUE)

# Find the most populous city in each state within the Danger Zone
most_populous_per_state <- cities_danger_zone %>%
  group_by(state_name) %>%
  slice_max(population, n = 1)  # Select the most populous city per state

# Plot
ggplot() +
  # Add states outline
  geom_sf(data = states, fill = NA, color = "black", size = 0.3) +

  # Plot all cities in danger zone with color gradient
  geom_sf(data = cities_danger_zone, aes(color = population), size = 1, alpha = 0.7) +

  # Highlight using gghighlight (ensures clear focus)
  gghighlight(in_border_zone == TRUE, use_direct_label = FALSE) +

  # Label the most populous city in each state within the Danger Zone
  ggrepel::geom_text_repel(
    data = most_populous_per_state,
    aes(label = city, geometry = geometry),
    stat = "sf_coordinates",
    size = 3,
    color = "black"
  ) +

  # Set color gradient
  scale_color_gradient(low = "orange", high = "darkred", name = "Population") +

  theme_minimal() +
  theme(legend.position = "bottom") +
  labs(
    title = "Most Populous Cities in the Danger Zone (100 Miles of Border)",
    subtitle = "Most populous cities in each state within 100 miles of US borders (Mexico, Canada, Coastlines)",
    caption = "Data: Custom Dataset"
  )

```

